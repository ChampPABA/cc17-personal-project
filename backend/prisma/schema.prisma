generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String         @unique
  password      String
  isActive      Boolean        @default(false)
  createdAt     DateTime       @default(now()) @db.Timestamp(0)
  updatedAt     DateTime?      @updatedAt @db.Timestamp(0)
  userRoles     UserRole[]
  quotations    Quotation[]
  notifications Notification[]

  @@map("users")
}

model Role {
  id        Int        @id @default(autoincrement())
  roleName  RoleName   @unique
  userRoles UserRole[]

  @@map("roles")
}

enum RoleName {
  ADMIN
  USER
}

model UserRole {
  id         Int      @id @default(autoincrement())
  assignedAt DateTime @default(now()) @db.Timestamp(0)
  userId     Int
  roleId     Int      @default(2)

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model Quotation {
  id                Int        @id @default(autoincrement())
  userId            Int
  customerFirstName String?
  customerLastName  String?
  customerMobile    String?
  customerEmail     String?
  projectName       String?
  roomNo            String?
  roomFloor         String?
  roomType          String?
  roomSize          Decimal?   @db.Decimal(12, 2)
  roomPrice         Decimal?   @db.Decimal(12, 2)
  roomDiscount      Decimal?   @db.Decimal(12, 2)
  bookingPayment    Decimal?   @db.Decimal(12, 2)
  downPayment       Decimal?   @db.Decimal(12, 2)
  commonFee         Decimal?   @db.Decimal(12, 2)
  sinkingFund       Decimal?   @db.Decimal(12, 2)
  status            StatusName @default(DRAFTED)
  createdAt         DateTime   @default(now()) @db.Timestamp(0)
  updatedAt         DateTime?  @updatedAt @db.Timestamp(0)
  deletedAt         DateTime?  @db.Timestamp(0)
  approveEmail      String?

  user User @relation(fields: [userId], references: [id])

  @@map("quotations")
}

enum StatusName {
  DRAFTED
  COMPLETED
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
